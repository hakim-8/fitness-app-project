import React, { useState, useEffect } from "react";
import {
  TextField,
  Button,
  Box,
  Typography,
  Stack,
  Card,
  CardContent,
  CircularProgress,
} from "@mui/material";
import { chatSession } from "../configs/AiModel";

const WorkoutQuiz = () => {
  const [formData, setFormData] = useState({
    height: "",
    weight: "",
    age: "",
    gender: "",
    workoutDays: "",
  });
  const [workoutPlan, setWorkoutPlan] = useState("");
  const [loading, setLoading] = useState(false);
  useEffect(() => {
    window.scrollTo(0, 0);
  }, []);

  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const handleFitnessLevelClick = (level) => {
    setFormData({ ...formData, fitnessLevel: level });
  };

  const handleCardioClick = (preference) => {
    setFormData({ ...formData, cardioPreference: preference });
  };

  const generatePlan = async () => {
    const cardioPrompt = {
      "I love cardio": "include cardio",
      "I'd rather do it playing a sport I like":
        "include cardio and include a day where the user can play a sport they like",
      "I'm not a big fan but I can do it if it is necessary":
        "include minimal cardio",
      "I hate cardio": "do not include cardio",
    };
    const prompt = `
      Based on the following details:
      - Height: ${formData.height} cm
      - Weight: ${formData.weight} kg
      - Age: ${formData.age} years
      - Gender: ${formData.gender}
      - Number of days available to workout: ${formData.workoutDays},
      Create a detailed 7-day workout plan for a ${
        formData.fitnessLevel
      }. Structure it day by day from Monday to Sunday and give specific exercises on each day to ensure the user targets every body part during the week. Include rest days as well.${
      cardioPrompt[formData.cardioPreference]
    }
    `;

    const GenerateWorkoutPlan = async (prompt) => {
      try {
        // Log the prompt for debugging
        console.log("Prompt received:", prompt);
        setLoading(true);

        // Use the chatSession to send a message directly
        const result = await chatSession.sendMessage(prompt);

        // Log the result for debugging
        console.log("Workout plan generated:", result.response.text());
        setWorkoutPlan(result.response.text());
        setLoading(false);
        // Return the generated plan or handle it as needed
        return result.response.text();
      } catch (error) {
        console.error("Error generating workout plan:", error);
        setLoading(false);
      }
    };

    GenerateWorkoutPlan(prompt);
  };

  return (
    <Stack>
      <Typography
        textAlign="center"
        fontSize="40px"
        fontWeight="bold"
        sx={{ color: "#ff2625", p: "30px" }}
      >
        GET A FREE WORKOUT PLAN GENERATED BY AI
      </Typography>
      <Typography
        textAlign="center"
        fontSize="10px"
        sx={{
          color: "grey",
          fontStyle: "italic",
          paddingBottom: "30px",
        }}
      >
        DISCLAIMER: This workout plan will not be saved. If you refresh the
        page, you might lose it. Make sure to take a screenshot, write it down
        or download it.
      </Typography>

      <Box
        sx={{
          display: "flex",
          flexDirection: "column",
          alignItems: "center",
          gap: 2,
          width: "100%",
          maxWidth: "400px",
          margin: "0 auto",
        }}
      >
        <Box sx={{ width: "100%" }}>
          <Typography
            textAlign="center"
            sx={{ color: "whitesmoke", paddingBottom: "25px" }}
          >
            Take this quiz and AI will generate the best workout plan for you!
          </Typography>
          <Typography
            variant="body1"
            sx={{
              color: "white",
              fontWeight: "bold",
              marginBottom: "4px",
              textAlign: "left",
            }}
          >
            What is your height (in cm)?
          </Typography>
          <TextField
            name="height"
            placeholder="e.g., 180"
            onChange={handleChange}
            fullWidth
            sx={{
              backgroundColor: "white",
              "& .MuiInputBase-input": {
                fontSize: "1rem",
              },
            }}
          />
        </Box>

        <Box sx={{ width: "100%" }}>
          <Typography
            variant="body1"
            sx={{
              color: "white",
              fontWeight: "bold",
              marginBottom: "4px",
              textAlign: "left",
            }}
          >
            What is your weight (in kg)?
          </Typography>
          <TextField
            name="weight"
            placeholder="e.g., 70"
            onChange={handleChange}
            fullWidth
            sx={{
              backgroundColor: "white",
              "& .MuiInputBase-input": {
                fontSize: "1rem",
              },
            }}
          />
        </Box>

        <Box sx={{ width: "100%" }}>
          <Typography
            variant="body1"
            sx={{
              color: "white",
              fontWeight: "bold",
              marginBottom: "4px",
              textAlign: "left",
            }}
          >
            How old are you?
          </Typography>
          <TextField
            name="age"
            placeholder="e.g., 25"
            onChange={handleChange}
            fullWidth
            sx={{
              backgroundColor: "white",
              "& .MuiInputBase-input": {
                fontSize: "1rem",
              },
            }}
          />
        </Box>

        <Box sx={{ width: "100%" }}>
          <Typography
            variant="body1"
            sx={{
              color: "white",
              fontWeight: "bold",
              marginBottom: "4px",
              textAlign: "left",
            }}
          >
            What is your gender?
          </Typography>
          <TextField
            name="gender"
            placeholder="e.g., Male, Female, or Non-Binary"
            onChange={handleChange}
            fullWidth
            sx={{
              backgroundColor: "white",
              "& .MuiInputBase-input": {
                fontSize: "1rem",
              },
            }}
          />
        </Box>

        <Box sx={{ width: "100%" }}>
          <Typography
            variant="body1"
            sx={{
              color: "white",
              fontWeight: "bold",
              marginBottom: "4px",
              textAlign: "left",
            }}
          >
            How many days a week can you work out?
          </Typography>
          <TextField
            name="workoutDays"
            placeholder="e.g., 4"
            onChange={handleChange}
            fullWidth
            sx={{
              backgroundColor: "white",
              "& .MuiInputBase-input": {
                fontSize: "1rem",
              },
            }}
          />
        </Box>
        <Box sx={{ width: "100%" }}>
          <Typography
            variant="body1"
            sx={{
              color: "white",
              fontWeight: "bold",
              marginBottom: "4px",
              textAlign: "left",
            }}
          >
            What is your fitness level?
          </Typography>

          <Box
            sx={{
              display: "flex",
              flexDirection: "column",
              gap: 1,
            }}
          >
            {["Beginner", "Intermediate", "Expert"].map((level) => (
              <Button
                key={level}
                fullWidth
                onClick={() => handleFitnessLevelClick(level)}
                sx={{
                  backgroundColor:
                    formData.fitnessLevel === level ? "#1565c0" : "#ff2625",
                  color: "white",
                  fontWeight: "bold",
                  textTransform: "none",
                  "&:hover": {
                    backgroundColor: "whitesmoke",
                    color: "black",
                  },
                }}
              >
                {level}
              </Button>
            ))}
          </Box>
        </Box>

        <Box sx={{ width: "100%" }}>
          <Typography
            variant="body1"
            sx={{
              color: "white",
              fontWeight: "bold",
              marginBottom: "4px",
              textAlign: "left",
            }}
          >
            How do you feel about cardio?
          </Typography>

          <Box
            sx={{
              display: "flex",
              flexDirection: "column",
              gap: 1,
            }}
          >
            {[
              "I love cardio",
              "I'd rather do it playing a sport I like",
              "I'm not a big fan but I can do it if it is necessary",
              "I hate cardio",
            ].map((option) => (
              <Button
                key={option}
                fullWidth
                onClick={() => handleCardioClick(option)}
                sx={{
                  backgroundColor:
                    formData.cardioPreference === option
                      ? "#1565c0"
                      : "#ff2625",
                  color: "white",
                  fontWeight: "bold",
                  textTransform: "none",
                  "&:hover": {
                    backgroundColor: "whitesmoke",
                    color: "black",
                  },
                }}
              >
                {option}
              </Button>
            ))}
          </Box>
        </Box>

        <Button
          onClick={generatePlan}
          fullWidth
          disabled={
            !formData.height ||
            !formData.weight ||
            !formData.age ||
            !formData.gender ||
            !formData.workoutDays
          }
          sx={{
            backgroundColor: "#1976d2",
            color: "white",
            fontWeight: "bold",
            fontSize: "1rem",
            textTransform: "none",
            mt: "20px",
            opacity:
              !formData.height ||
              !formData.weight ||
              !formData.age ||
              !formData.gender ||
              !formData.workoutDays
                ? 0.6
                : 1, // Make button more transparent if disabled
            pointerEvents:
              !formData.height ||
              !formData.weight ||
              !formData.age ||
              !formData.gender ||
              !formData.workoutDays
                ? "none"
                : "auto", // Disable pointer events if any field is missing
            cursor:
              !formData.height ||
              !formData.weight ||
              !formData.age ||
              !formData.gender ||
              !formData.workoutDays
                ? "not-allowed"
                : "pointer", // Show 'not-allowed' cursor when disabled
            "&:hover": {
              backgroundColor:
                !formData.height ||
                !formData.weight ||
                !formData.age ||
                !formData.gender ||
                !formData.workoutDays
                  ? "#1976d2"
                  : "#1565c0", // Prevent hover styles when disabled
              color:
                !formData.height ||
                !formData.weight ||
                !formData.age ||
                !formData.gender ||
                !formData.workoutDays
                  ? "white"
                  : "#ffeb3b", // Prevent hover color changes when disabled
            },
          }}
        >
          Generate Plan
        </Button>
      </Box>
      {loading ? (
        <Box
          sx={{
            display: "flex",
            flexDirection: "column",
            alignItems: "center",
            justifyContent: "center",
            height: "100vh",
          }}
        >
          <CircularProgress sx={{ mb: 2 }} />
          <Typography variant="h6" sx={{ color: "whitesmoke" }}>
            Give us a second while the AI generates your workout plan...
          </Typography>
        </Box>
      ) : (
        workoutPlan && (
          <Box
            sx={{ mt: 4, p: 2, backgroundColor: "#f4f4f4", borderRadius: 2 }}
          >
            <Typography variant="h4" sx={{ mb: 2, textAlign: "center" }}>
              Your Customized Workout Plan
            </Typography>
            <Card>
              <CardContent>
                <Typography
                  variant="body1"
                  component="div"
                  dangerouslySetInnerHTML={{
                    __html: workoutPlan.replace(/\n/g, "<br>"),
                  }}
                />
              </CardContent>
            </Card>
            <Button
              variant="outlined"
              sx={{
                mt: 2,
                border: "2px solid",
                borderColor: "primary.main",
                color: "primary.main",
                "&:hover": {
                  backgroundColor: "blue", // Blue background on hover
                  color: "white", // White text color on hover
                  transform: "scale(1.1)", // Scale up the button when hovered
                  transition: "all 0.3s ease", // Smooth transition for all properties
                },
              }}
              onClick={() => {
                const blob = new Blob([workoutPlan], {
                  type: "text/plain;charset=utf-8",
                });
                const link = document.createElement("a");
                link.href = URL.createObjectURL(blob);
                link.download = "Workout_Plan.txt";
                link.click();
              }}
            >
              Download Plan
            </Button>
          </Box>
        )
      )}
    </Stack>
  );
};

export default WorkoutQuiz;
